     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]
     6 00000000                                 [BITS 32]
     7 00000000                                 [FILE "naskfunc.nas"]
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    15 00000000                                 		GLOBAL  _load_cr0,_store_cr0
    16 00000000                                 		GLOBAL _memtest_sub
    17 00000000                                 		EXTERN	_inthandler20, _inthandler21, _inthandler27, _inthandler2c
    18 00000000                                 
    19                                          [SECTION .text]
    20 00000000                                 
    21 00000000                                 _io_hlt:	; void io_hlt(void);
    22 00000000 F4                              		HLT
    23 00000001 C3                              		RET
    24 00000002                                 
    25 00000002                                 _io_cli:	; void io_cli(void);
    26 00000002 FA                              		CLI
    27 00000003 C3                              		RET
    28 00000004                                 
    29 00000004                                 _io_sti:	; void io_sti(void);
    30 00000004 FB                              		STI
    31 00000005 C3                              		RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                              		STI
    35 00000007 F4                              		HLT
    36 00000008 C3                              		RET
    37 00000009                                 
    38 00000009                                 _io_in8:	; int io_in8(int port);
    39 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    40 0000000D B8 00000000                     		MOV		EAX,0
    41 00000012 EC                              		IN		AL,DX
    42 00000013 C3                              		RET
    43 00000014                                 
    44 00000014                                 _io_in16:	; int io_in16(int port);
    45 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    46 00000018 B8 00000000                     		MOV		EAX,0
    47 0000001D 66 ED                           		IN		AX,DX
    48 0000001F C3                              		RET
    49 00000020                                 
    50 00000020                                 _io_in32:	; int io_in32(int port);
    51 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                              		IN		EAX,DX
    53 00000025 C3                              		RET
    54 00000026                                 
    55 00000026                                 _io_out8:	; void io_out8(int port, int data);
    56 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    58 0000002E EE                              		OUT		DX,AL
    59 0000002F C3                              		RET
    60 00000030                                 
    61 00000030                                 _io_load_eflags:
    62 00000030 9C                              		PUSHFD
    63 00000031 58                              		POP		EAX
    64 00000032 C3                              		RET
    65 00000033                                 
    66 00000033                                 _io_store_eflags:
    67 00000033 8B 44 24 04                     		MOV		EAX,[ESP+4]
    68 00000037 50                              		PUSH	EAX
    69 00000038 9D                              		POPFD
    70 00000039 C3                              		RET
    71 0000003A                                 
    72 0000003A                                 _load_gdtr:
    73 0000003A 66 8B 44 24 04                  	MOV  AX,[ESP+4]
    74 0000003F 66 89 44 24 06                  	MOV  [ESP+6],AX
    75 00000044 0F 01 54 24 06                  	LGDT [ESP+6]
    76 00000049 C3                              	RET
    77 0000004A                                 
    78 0000004A                                 _load_idtr:
    79 0000004A 66 8B 44 24 04                  	MOV  AX,[ESP+4]
    80 0000004F 66 89 44 24 06                  	MOV  [ESP+6],AX
    81 00000054 0F 01 5C 24 06                  	LIDT [ESP+6]
    82 00000059 C3                              	RET
    83 0000005A                                 
    84 0000005A                                 _asm_inthandler20:
    85 0000005A 06                              		PUSH	ES
    86 0000005B 1E                              		PUSH	DS
    87 0000005C 60                              		PUSHAD
    88 0000005D 89 E0                           		MOV		EAX,ESP
    89 0000005F 50                              		PUSH	EAX
    90 00000060 66 8C D0                        		MOV		AX,SS
    91 00000063 8E D8                           		MOV		DS,AX
    92 00000065 8E C0                           		MOV		ES,AX
    93 00000067 E8 [00000000]                   		CALL	_inthandler20
    94 0000006C 58                              		POP		EAX
    95 0000006D 61                              		POPAD
    96 0000006E 1F                              		POP		DS
    97 0000006F 07                              		POP		ES
    98 00000070 CF                              		IRETD
    99 00000071                                 
   100 00000071                                 _asm_inthandler21:
   101 00000071 06                              		PUSH	ES
   102 00000072 1E                              		PUSH	DS
   103 00000073 60                              		PUSHAD
   104 00000074 89 E0                           		MOV		EAX,ESP
   105 00000076 50                              		PUSH	EAX
   106 00000077 66 8C D0                        		MOV		AX,SS
   107 0000007A 8E D8                           		MOV		DS,AX
   108 0000007C 8E C0                           		MOV		ES,AX
   109 0000007E E8 [00000000]                   		CALL	_inthandler21
   110 00000083 58                              		POP		EAX
   111 00000084 61                              		POPAD
   112 00000085 1F                              		POP		DS
   113 00000086 07                              		POP		ES
   114 00000087 CF                              		IRETD
   115 00000088                                 
   116 00000088                                 _asm_inthandler27:
   117 00000088 06                              		PUSH	ES
   118 00000089 1E                              		PUSH	DS
   119 0000008A 60                              		PUSHAD
   120 0000008B 89 E0                           		MOV		EAX,ESP
   121 0000008D 50                              		PUSH	EAX
   122 0000008E 66 8C D0                        		MOV		AX,SS
   123 00000091 8E D8                           		MOV		DS,AX
   124 00000093 8E C0                           		MOV		ES,AX
   125 00000095 E8 [00000000]                   		CALL	_inthandler27
   126 0000009A 58                              		POP		EAX
   127 0000009B 61                              		POPAD
   128 0000009C 1F                              		POP		DS
   129 0000009D 07                              		POP		ES
   130 0000009E CF                              		IRETD
   131 0000009F                                 
   132 0000009F                                 _asm_inthandler2c:
   133 0000009F 06                              		PUSH	ES
   134 000000A0 1E                              		PUSH	DS
   135 000000A1 60                              		PUSHAD
   136 000000A2 89 E0                           		MOV		EAX,ESP
   137 000000A4 50                              		PUSH	EAX
   138 000000A5 66 8C D0                        		MOV		AX,SS
   139 000000A8 8E D8                           		MOV		DS,AX
   140 000000AA 8E C0                           		MOV		ES,AX
   141 000000AC E8 [00000000]                   		CALL	_inthandler2c
   142 000000B1 58                              		POP		EAX
   143 000000B2 61                              		POPAD
   144 000000B3 1F                              		POP		DS
   145 000000B4 07                              		POP		ES
   146 000000B5 CF                              		IRETD
   147 000000B6                                 
   148 000000B6                                 _load_cr0:
   149 000000B6 0F 20 C0                        	MOV EAX,CR0
   150 000000B9 C3                              	RET
   151 000000BA                                 
   152 000000BA                                 _store_cr0:
   153 000000BA 8B 44 24 04                     	MOV EAX,[ESP+4]
   154 000000BE 0F 22 C0                        	MOV CR0,EAX
   155 000000C1 C3                              	RET
   156 000000C2                                 
   157 000000C2                                 _memtest_sub:
   158 000000C2 57                              	PUSH EDI
   159 000000C3 56                              	PUSH ESI
   160 000000C4 53                              	PUSH EBX
   161 000000C5 BE AA55AA55                     	MOV  ESI,0xaa55aa55  ; ESI = pat0
   162 000000CA BF 55AA55AA                     	MOV  EDI,0x55aa55aa  ; EDI = pat1
   163 000000CF 8B 44 24 10                     	MOV  EAX,[ESP+12+4]  ; i = start
   164 000000D3                                 mts_loop:
   165 000000D3 89 C3                           	MOV  EBX,EAX         ; p = i
   166 000000D5 81 C3 00000FFC                  	ADD  EBX,0xffc       ; p += 0xffc
   167 000000DB 8B 13                           	MOV  EDX,[EBX]       ; old = *p;
   168 000000DD 89 33                           	MOV  [EBX],ESI       ; *p = pat0
   169 000000DF 83 33 FF                        	XOR  DWORD [EBX],0xffffffff    ; *p ^= 0xffffffff
   170 000000E2 3B 3B                           	CMP  EDI,[EBX]
   171 000000E4 75 11                           	JNE  mts_fin
   172 000000E6 89 13                           	MOV  [EBX],EDX
   173 000000E8 05 00001000                     	ADD  EAX,0x1000
   174 000000ED 3B 44 24 14                     	CMP  EAX,[ESP+12+8]
   175 000000F1 76 E0                           	JBE  mts_loop
   176 000000F3 5B                              	POP  EBX
   177 000000F4 5E                              	POP  ESI
   178 000000F5 5F                              	POP  EDI
   179 000000F6 C3                              	RET
   180 000000F7                                 mts_fin:
   181 000000F7 89 13                           	MOV  [EBX],EDX
   182 000000F9 5B                              	POP  EBX
   183 000000FA 5E                              	POP  ESI
   184 000000FB 5F                              	POP  EDI
   185 000000FC C3                              	RET